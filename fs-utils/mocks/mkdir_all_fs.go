// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"

	writablefs "github.com/thewizardplusplus/go-writable-fs"
)

// MkdirAllFS is an autogenerated mock type for the MkdirAllFS type
type MkdirAllFS struct {
	mock.Mock
}

type MkdirAllFS_Expecter struct {
	mock *mock.Mock
}

func (_m *MkdirAllFS) EXPECT() *MkdirAllFS_Expecter {
	return &MkdirAllFS_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: path
func (_m *MkdirAllFS) Create(path string) (writablefs.WritableFile, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 writablefs.WritableFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (writablefs.WritableFile, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) writablefs.WritableFile); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writablefs.WritableFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkdirAllFS_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MkdirAllFS_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - path string
func (_e *MkdirAllFS_Expecter) Create(path interface{}) *MkdirAllFS_Create_Call {
	return &MkdirAllFS_Create_Call{Call: _e.mock.On("Create", path)}
}

func (_c *MkdirAllFS_Create_Call) Run(run func(path string)) *MkdirAllFS_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MkdirAllFS_Create_Call) Return(_a0 writablefs.WritableFile, _a1 error) *MkdirAllFS_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MkdirAllFS_Create_Call) RunAndReturn(run func(string) (writablefs.WritableFile, error)) *MkdirAllFS_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExcl provides a mock function with given fields: path
func (_m *MkdirAllFS) CreateExcl(path string) (writablefs.WritableFile, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CreateExcl")
	}

	var r0 writablefs.WritableFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (writablefs.WritableFile, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) writablefs.WritableFile); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writablefs.WritableFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkdirAllFS_CreateExcl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExcl'
type MkdirAllFS_CreateExcl_Call struct {
	*mock.Call
}

// CreateExcl is a helper method to define mock.On call
//   - path string
func (_e *MkdirAllFS_Expecter) CreateExcl(path interface{}) *MkdirAllFS_CreateExcl_Call {
	return &MkdirAllFS_CreateExcl_Call{Call: _e.mock.On("CreateExcl", path)}
}

func (_c *MkdirAllFS_CreateExcl_Call) Run(run func(path string)) *MkdirAllFS_CreateExcl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MkdirAllFS_CreateExcl_Call) Return(_a0 writablefs.WritableFile, _a1 error) *MkdirAllFS_CreateExcl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MkdirAllFS_CreateExcl_Call) RunAndReturn(run func(string) (writablefs.WritableFile, error)) *MkdirAllFS_CreateExcl_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function with given fields: path, permissions
func (_m *MkdirAllFS) Mkdir(path string, permissions fs.FileMode) error {
	ret := _m.Called(path, permissions)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkdirAllFS_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type MkdirAllFS_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - path string
//   - permissions fs.FileMode
func (_e *MkdirAllFS_Expecter) Mkdir(path interface{}, permissions interface{}) *MkdirAllFS_Mkdir_Call {
	return &MkdirAllFS_Mkdir_Call{Call: _e.mock.On("Mkdir", path, permissions)}
}

func (_c *MkdirAllFS_Mkdir_Call) Run(run func(path string, permissions fs.FileMode)) *MkdirAllFS_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MkdirAllFS_Mkdir_Call) Return(_a0 error) *MkdirAllFS_Mkdir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkdirAllFS_Mkdir_Call) RunAndReturn(run func(string, fs.FileMode) error) *MkdirAllFS_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: path, permissions
func (_m *MkdirAllFS) MkdirAll(path string, permissions fs.FileMode) error {
	ret := _m.Called(path, permissions)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkdirAllFS_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MkdirAllFS_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - permissions fs.FileMode
func (_e *MkdirAllFS_Expecter) MkdirAll(path interface{}, permissions interface{}) *MkdirAllFS_MkdirAll_Call {
	return &MkdirAllFS_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, permissions)}
}

func (_c *MkdirAllFS_MkdirAll_Call) Run(run func(path string, permissions fs.FileMode)) *MkdirAllFS_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MkdirAllFS_MkdirAll_Call) Return(_a0 error) *MkdirAllFS_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkdirAllFS_MkdirAll_Call) RunAndReturn(run func(string, fs.FileMode) error) *MkdirAllFS_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: name
func (_m *MkdirAllFS) Open(name string) (fs.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 fs.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkdirAllFS_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MkdirAllFS_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MkdirAllFS_Expecter) Open(name interface{}) *MkdirAllFS_Open_Call {
	return &MkdirAllFS_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MkdirAllFS_Open_Call) Run(run func(name string)) *MkdirAllFS_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MkdirAllFS_Open_Call) Return(_a0 fs.File, _a1 error) *MkdirAllFS_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MkdirAllFS_Open_Call) RunAndReturn(run func(string) (fs.File, error)) *MkdirAllFS_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: path
func (_m *MkdirAllFS) Remove(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkdirAllFS_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MkdirAllFS_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path string
func (_e *MkdirAllFS_Expecter) Remove(path interface{}) *MkdirAllFS_Remove_Call {
	return &MkdirAllFS_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MkdirAllFS_Remove_Call) Run(run func(path string)) *MkdirAllFS_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MkdirAllFS_Remove_Call) Return(_a0 error) *MkdirAllFS_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkdirAllFS_Remove_Call) RunAndReturn(run func(string) error) *MkdirAllFS_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: oldPath, newPath
func (_m *MkdirAllFS) Rename(oldPath string, newPath string) error {
	ret := _m.Called(oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkdirAllFS_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type MkdirAllFS_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldPath string
//   - newPath string
func (_e *MkdirAllFS_Expecter) Rename(oldPath interface{}, newPath interface{}) *MkdirAllFS_Rename_Call {
	return &MkdirAllFS_Rename_Call{Call: _e.mock.On("Rename", oldPath, newPath)}
}

func (_c *MkdirAllFS_Rename_Call) Run(run func(oldPath string, newPath string)) *MkdirAllFS_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MkdirAllFS_Rename_Call) Return(_a0 error) *MkdirAllFS_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkdirAllFS_Rename_Call) RunAndReturn(run func(string, string) error) *MkdirAllFS_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// NewMkdirAllFS creates a new instance of MkdirAllFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMkdirAllFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MkdirAllFS {
	mock := &MkdirAllFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
