// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// ReadDirWritableFile is an autogenerated mock type for the ReadDirWritableFile type
type ReadDirWritableFile struct {
	mock.Mock
}

type ReadDirWritableFile_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadDirWritableFile) EXPECT() *ReadDirWritableFile_Expecter {
	return &ReadDirWritableFile_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *ReadDirWritableFile) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadDirWritableFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ReadDirWritableFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ReadDirWritableFile_Expecter) Close() *ReadDirWritableFile_Close_Call {
	return &ReadDirWritableFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ReadDirWritableFile_Close_Call) Run(run func()) *ReadDirWritableFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadDirWritableFile_Close_Call) Return(_a0 error) *ReadDirWritableFile_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadDirWritableFile_Close_Call) RunAndReturn(run func() error) *ReadDirWritableFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: _a0
func (_m *ReadDirWritableFile) Read(_a0 []byte) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirWritableFile_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ReadDirWritableFile_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ReadDirWritableFile_Expecter) Read(_a0 interface{}) *ReadDirWritableFile_Read_Call {
	return &ReadDirWritableFile_Read_Call{Call: _e.mock.On("Read", _a0)}
}

func (_c *ReadDirWritableFile_Read_Call) Run(run func(_a0 []byte)) *ReadDirWritableFile_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ReadDirWritableFile_Read_Call) Return(_a0 int, _a1 error) *ReadDirWritableFile_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadDirWritableFile_Read_Call) RunAndReturn(run func([]byte) (int, error)) *ReadDirWritableFile_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: n
func (_m *ReadDirWritableFile) ReadDir(n int) ([]fs.DirEntry, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []fs.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]fs.DirEntry, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []fs.DirEntry); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirWritableFile_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type ReadDirWritableFile_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - n int
func (_e *ReadDirWritableFile_Expecter) ReadDir(n interface{}) *ReadDirWritableFile_ReadDir_Call {
	return &ReadDirWritableFile_ReadDir_Call{Call: _e.mock.On("ReadDir", n)}
}

func (_c *ReadDirWritableFile_ReadDir_Call) Run(run func(n int)) *ReadDirWritableFile_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ReadDirWritableFile_ReadDir_Call) Return(_a0 []fs.DirEntry, _a1 error) *ReadDirWritableFile_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadDirWritableFile_ReadDir_Call) RunAndReturn(run func(int) ([]fs.DirEntry, error)) *ReadDirWritableFile_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields:
func (_m *ReadDirWritableFile) Stat() (fs.FileInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (fs.FileInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() fs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirWritableFile_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type ReadDirWritableFile_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
func (_e *ReadDirWritableFile_Expecter) Stat() *ReadDirWritableFile_Stat_Call {
	return &ReadDirWritableFile_Stat_Call{Call: _e.mock.On("Stat")}
}

func (_c *ReadDirWritableFile_Stat_Call) Run(run func()) *ReadDirWritableFile_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadDirWritableFile_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *ReadDirWritableFile_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadDirWritableFile_Stat_Call) RunAndReturn(run func() (fs.FileInfo, error)) *ReadDirWritableFile_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *ReadDirWritableFile) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirWritableFile_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ReadDirWritableFile_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *ReadDirWritableFile_Expecter) Write(p interface{}) *ReadDirWritableFile_Write_Call {
	return &ReadDirWritableFile_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *ReadDirWritableFile_Write_Call) Run(run func(p []byte)) *ReadDirWritableFile_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ReadDirWritableFile_Write_Call) Return(n int, err error) *ReadDirWritableFile_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ReadDirWritableFile_Write_Call) RunAndReturn(run func([]byte) (int, error)) *ReadDirWritableFile_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadDirWritableFile creates a new instance of ReadDirWritableFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadDirWritableFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadDirWritableFile {
	mock := &ReadDirWritableFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
