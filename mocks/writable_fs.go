// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
	writablefs "github.com/thewizardplusplus/go-writable-fs"
)

// WritableFS is an autogenerated mock type for the WritableFS type
type WritableFS struct {
	mock.Mock
}

// Create provides a mock function with given fields: path
func (_m *WritableFS) Create(path string) (writablefs.WritableFile, error) {
	ret := _m.Called(path)

	var r0 writablefs.WritableFile
	if rf, ok := ret.Get(0).(func(string) writablefs.WritableFile); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writablefs.WritableFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExcl provides a mock function with given fields: path
func (_m *WritableFS) CreateExcl(path string) (writablefs.WritableFile, error) {
	ret := _m.Called(path)

	var r0 writablefs.WritableFile
	if rf, ok := ret.Get(0).(func(string) writablefs.WritableFile); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writablefs.WritableFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mkdir provides a mock function with given fields: path, permissions
func (_m *WritableFS) Mkdir(path string, permissions fs.FileMode) error {
	ret := _m.Called(path, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: name
func (_m *WritableFS) Open(name string) (fs.File, error) {
	ret := _m.Called(name)

	var r0 fs.File
	if rf, ok := ret.Get(0).(func(string) fs.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: path
func (_m *WritableFS) Remove(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: oldPath, newPath
func (_m *WritableFS) Rename(oldPath string, newPath string) error {
	ret := _m.Called(oldPath, newPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWritableFS interface {
	mock.TestingT
	Cleanup(func())
}

// NewWritableFS creates a new instance of WritableFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWritableFS(t mockConstructorTestingTNewWritableFS) *WritableFS {
	mock := &WritableFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
